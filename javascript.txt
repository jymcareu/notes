js5种基本数据类型:number 、string 、boolean 、undefined 、object(Null,Function,Object,Array)
判断object的具体类型可以使用：var a = Object.prototype.toString.call(obj).slice(8,-1)；

alert(a),自动调用了a的toString方法。

null与undefined的区别：
1、typeof(null); //object
      typeof(undefined); //undefined
2、undefined转换为数字是 NaN, 而null转为数字是0；

NaN不等于任何数，包括他本身；NaN == NaN //false
布尔类型与其它任何类型进行比较，布尔类型将会转换为number类型。 
Number([])返回0
那么Number({})返回的就是NaN

setTimeout中所执行函数中的this， 非严格模式指向window,严格模式指向undefined 

布尔类型里只有这几参数个返回false，其它都为true
Boolean(undefined) // false
Boolean(null) // false 
Boolean(0) // false 
Boolean(NaN) // false 
Boolean('') // false

字符串：


toUpperCase():把一个字符串全部变为大写；
var s="hello"; s.toUpperCase();
toLowerCase():把一个字符串全部变为小写；


replace():全文字符替换；
s.replace('h','H'); //字符串中的'h'全被替换成'H' ；


indexOf():会搜索指定字符串出现的位置;
 var s = 'hello, world';s.indexOf('world'); // 返回7
s.lastIndexOf('l')  //字符l最后一次出现的位置
s.indexOf('l',3)  //字符l在位置3及以后出现的位置


substring():返回指定索引区间的子串；
var s = 'hello, world'；
s.substring(0, 5); // 从索引0开始到5（不包括5），返回'hello' 
s.substring(7); // 从索引7开始到结束，返回'world'


charAt() :返回指定位置的字符
s.charAt(s.length-1)  //最后一个字符


split():将字符串分割转为数组
s.split(',') //["hello","world"]


slice():截取String的部分元素，返回一个新字符串；
"hello world".slice(2,-1) //"llo worl"


数组：


slice():就是对应String的substring()，它截取Array的部分元素，然后返回一个新数组（不修改原数组）
var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']
arr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']


push()：向Array的末尾添加若干元素，并返回数组新的长度；
pop()：则把Array的最后一个元素删除掉，并返回删除的值；


unshift():往Array的头部添加若干元素，并返回数组新的长度;
shift():把Array的第一个元素删掉，并返回删除的元素;


sort():可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序：


reverse():把整个Array的元素给掉个个，也就是反转：


splice():是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：
var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];
// 从索引2开始删除3个元素,然后再添加两个元素:
arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']
arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']


concat():把当前的Array和另一个Array连接起来，并返回一个新的Array：
var arr = ['A', 'B', 'C'];
var added = arr.concat([1, 2, 3]);
added; // ['A', 'B', 'C', 1, 2, 3]
arr; // ['A', 'B', 'C']
实际上，concat()方法可以接收任意个元素和Array，并且自动把Array拆开，然后全部添加到新的Array里:
var arr = ['A', 'B', 'C'];
arr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4]


join():是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：
var arr = ['A', 'B', 'C', 1, 2, 3];
arr.join('-'); // 'A-B-C-1-2-3'
如果Array的元素不是字符串，将自动转换为字符串后再连接。


toString():将数组里的每个元素转化为字符串,并输出用逗号分隔的字符串列表。（但是不包括方括号或其他形式的分隔符）


forEach():遍历数组，为每个元素调用指定的函数，并修改原数组。
var data = [1,2,3,4,5];
data.forEach(function(v,i){
       data[i] = v + 1;
      });
console.log(data); //[2,3,4,5,6]


map(): 调用的数组的每个元素传递给指定的函数，并返回一个新数组，并不修改原数组。
var data = [1,2,3,4,5];
var b = data.map(function(x){ return x*x});
console.log(b); //[1,4,9,16,25]
console.log(data);//[1,2,3,4,5]


filter():返回的数组元素是调用的数组的一个子集，筛选出想要的数组。返回总是稠密的数组。
var data = [1,2,3,4,5];
var c = data.filter(function(x){ return x<3;});  //[1,2]
var d = data.filter(function(v,i){return i%2==0}); //[1,3,5]


every():当且仅当数组中所有元素调用判定函数都返回true时，才返回true。
some():当且仅当数组中所有元素调用判定函数都返回false时，才返回false。
var a = [1,2,3,4,5];
a.every(function(x){return x<10;}); // true 
a.every(function(x){return x%2==0;});//false
a.some(function(x){return x%2==0;});//false
a.some(isNaN);//false:a中不包含非数值元素。
一旦every()和some()确认该返回值时就会停止遍历数组元素。


reduce()和reduceRight()方法使用指定的函数将数组元素进行组合，生成单个值。reduce()是按照数组索引值从低到高处理数组，reduceRight()是从高到低
var a = [1,2,3,4,5];
var sum  = a.reduce(function(x,y){return x+y},0);  //15：数组求和
var product = a.reduce(function(x,y){return x*y},1); //120： 数组求积
var max = a.reduce(function(x,y){return (x>y)?x:y;}); //5：求最大值
reduce()有两个参数，第一个是执行的函数。第二个参数是传递给函数一个初值，是可选的，默认值是数组的第一个元素。


indexOf()和lastIndexOf()搜索整个数组中具有给定值的元素，返回找到的第一个元素的索引，如果没有找到就返回-1。indexOf()是从头至尾搜索，lastIndexOf()是反向搜索。
var a = [1,2,3,4,5,1,2,3];
a.indexOf(1);   //0
a.lastIndexOf(1); //5
indexOf()与lastIndexOf()方法有两个参数，第一个参数是需要搜索的值，第二个参数可选的：指定数组中的一个索引，从那里开始搜索，可以为负数，他代表相对数组末尾的偏移量。


对象

如果我们要检测xiaoming是否拥有某一属性，可以用in操作符：
var xiaoming = {
    name: '小明',
    birth: 1990,
    school: 'No.1 Middle School',
    height: 1.70,
    weight: 65,
    score: null
};
'name' in xiaoming; // true
'grade' in xiaoming; // false
不过要小心，如果in判断一个属性存在，这个属性不一定是xiaoming的，它可能是xiaoming继承得到的：
要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法：
var xiaoming = {
    name: '小明'
};
xiaoming.hasOwnProperty('name'); // true
xiaoming.hasOwnProperty('toString'); // false




Map 与 Set（Map和Set是ES6标准新增的数据类型，请根据浏览器的支持情况决定是否要使用）

给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，Array越长，耗时越长。
如果用Map实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用JavaScript写一个Map如下：
var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);
m.get('Michael'); // 95

初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：
var m = new Map(); // 空Map
m.set('Adam', 67); // 添加新的key-value
m.set('Bob', 59);
m.has('Adam'); // 是否存在key 'Adam': true
m.get('Adam'); // 67
m.delete('Adam'); // 删除key 'Adam'
m.get('Adam'); // undefined

由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉；

Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。
要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set：
var s1 = new Set(); // 空Set
var s2 = new Set([1, 2, 3]); // 含1, 2, 3
重复元素在Set中自动被过滤：
var s = new Set([1, 2, 3, 3, '3']);
s; // Set {1, 2, 3, "3"}
通过delete(key)方法可以删除元素：
var s = new Set([1, 2, 3]);
s; // Set {1, 2, 3}
s.delete(3);
s; // Set {1, 2}

iterable：
for...of循环遍历集合，可以遍历array，map，set，String, TypedArray，arguments 
for ... in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。
for ... in循环将把name包括在内，但Array的length属性却不包括在内。
for ... of循环则完全修复了这些问题，它只循环集合本身的元素：

var a = ['A', 'B', 'C'];
a.forEach(function (element, index, array) {
    // element: 指向当前元素的值
    // index: 指向当前索引
    // array: 指向Array对象本身
    alert(element);
});

Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身：
var s = new Set(['A', 'B', 'C']);
s.forEach(function (element, sameElement, set) {
    alert(element);
});

Map的回调函数参数依次为value、key和map本身：
var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
m.forEach(function (value, key, map) {
    alert(value);
});


函数：

JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array：
利用arguments，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值：
rest参数只能写在最后，前面用...标识，从运行结果可知，传入的参数先绑定a、b，多余的参数以数组形式交给变量rest，所以，不再需要arguments我们就获取了全部参数。
因为rest参数是ES6新标准，所以你需要测试一下浏览器是否支持。

为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：
function foo() {
    var sum = 0;
    for (let i=0; i<100; i++) {
        sum += i;
    }
    i += 1; // SyntaxError 使用let以后，for外部就访问不到i
}

常量

ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域：
const PI = 3.14;
PI = 3; // 某些浏览器不报错，但是无效果！
PI; // 3.14


函数方法：

要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。
function getAge() {
    var y = new Date().getFullYear();
    return y - this.birth;
}
var xiaoming = {
    name: '小明',
    birth: 1990,
    age: getAge
};
xiaoming.age(); // 25
getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空

另一个与apply()类似的方法是call()，唯一区别是：
apply()把参数打包成Array再传入；
call()把参数按顺序传入。
Math.max.apply(null, [3, 5, 4]); // 5
Math.max.call(null, 3, 5, 4); // 5

Map:
map()作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=x2，还可以计算任意复杂的函数；

reduce:
Array的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算;
[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)

filter:
filter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。
和map()类似，Array的filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。

去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。
r = arr.filter(function (element, index, self) {
    return self.indexOf(element) == index;
});

sort函数：
因为字符串根据ASCII码进行排序，而小写字母a的ASCII码在大写字母之后
Array的sort()方法默认把所有元素先转换为String再排序，结果'10'排在了'2'的前面，因为字符'1'比字符'2'的ASCII码小；
sort()方法也是一个高阶函数，它还可以接收一个比较函数来实现自定义的排序。

generator：
generator和函数不同的是，generator由function*定义（注意多出的*号），并且，除了return语句，还可以用yield返回多次。


对象构造要注意的几点：

    不要使用new Number()、new Boolean()、new String()创建包装对象；
 
    用parseInt()或parseFloat()来转换任意类型到number；

    用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；

    通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；

    typeof操作符可以判断出number、boolean、string、function和undefined；

    判断Array要使用Array.isArray(arr)；

    判断null请使用myVar === null；

    判断某个全局变量是否存在用typeof window.myVar === 'undefined'；

    函数内部判断某个变量是否存在用typeof myVar === 'undefined'。

对象的类型：

typeof 123; // 'number'
typeof NaN; // 'number'
typeof 'str'; // 'string'
typeof true; // 'boolean'
typeof undefined; // 'undefined'
typeof Math.abs; // 'function'
typeof null; // 'object'
typeof []; // 'object'
typeof {}; // 'object'



Date对象


var now = new Date();
now; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)
now.getFullYear(); // 2015, 年份
now.getMonth(); // 5, 月份，注意月份范围是0~11，5表示六月
now.getDate(); // 24, 表示24号
now.getDay(); // 3, 表示星期三
now.getHours(); // 19, 24小时制
now.getMinutes(); // 49, 分钟
now.getSeconds(); // 22, 秒
now.getMilliseconds(); // 875, 毫秒数
now.getTime(); // 1435146562875, 以number形式表示的时间戳

Date对象表示的时间总是按浏览器所在时区显示的，不过我们既可以显示本地时间，也可以显示调整后的UTC时间：
var d = new Date(1435146562875);
d.toLocaleString(); // '2015/6/24 下午7:49:22'，本地时间（北京时区+8:00），显示的字符串与操作系统设定的格式有关
d.toUTCString(); // 'Wed, 24 Jun 2015 11:49:22 GMT'，UTC时间，与本地时间相差8小时
我们只需要传递时间戳，或者把时间戳从数据库里读出来，再让JavaScript自动转换为当地时间就可以了。获得时间戳：
if (Date.now) {
    alert(Date.now()); // 老版本IE没有now()方法
} else {
    alert(new Date().getTime());
}



面向对象：


调用构造函数千万不要忘记写new。为了区分普通函数和构造函数，按照约定，构造函数首字母应当大写，而普通函数首字母应当小写，这样，一些语法检查工具如jslint将可以帮你检测到漏写的new；

原型继承：
JavaScript的原型继承实现方式就是：

    定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this；

    借助中间函数F实现原型链继承，最好通过封装的inherits函数完成；

    继续在新的构造函数的原型上定义新方法。（必须要在继承函数后面！！！）


class继承：


如果用新的class关键字来编写Student，可以这样写：
class Student {
    constructor(name) {
        this.name = name;
    }
    hello() {
        alert('Hello, ' + this.name + '!');
    }
}
比较一下就可以发现，class的定义包含了构造函数constructor和定义在原型对象上的函数hello()（注意没有function关键字），这样就避免了Student.prototype.hello = function () {...}这样分散的代码。
最后，创建一个Student对象代码和前面章节完全一样：
var xiaoming = new Student('小明');
xiaoming.hello();

用class定义对象的另一个巨大的好处是继承更方便了。想一想我们从Student派生一个PrimaryStudent需要编写的代码量。现在，原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过extends来实现：

class PrimaryStudent extends Student {
    constructor(name, grade) {
        super(name); // 记得用super调用父类的构造方法!
        this.grade = grade;
    }
    myGrade() {
        alert('I am at grade ' + this.grade);
    }
}


迭代生成器：
生成器中yield语句的返回值就是生成器中next()方法的返回值。
