window.onload事件要求网页内所有的元素全部加载完毕后才会触发，包括图片视频等等，加载时间非常长，所以可以用DOMReady事件代替，DOMReady只判断页面内所有的DOM节点是否已经全部生成，至于节点的内容是否加载完成并不关心。jquery中的DOMReady是 $(document).ready(func);

jquery中html()、text()、val()的区别

html()：用于读取和修改元素的HTML标签，对应js中的innerHTML；
          若存在多个元素，只读取第一个元素
text()：用来读取和修改元素的纯文本内容，对应js中的innerText;
          包括其后代元素，text()方法不能使用在表单元素上
val()：用于读取或修改表单元素的value值
         val()只能是用在表单元素上

层级选择器

子选择器：

过滤器

$('ul.lang li'); // 选出JavaScript、Python和Lua 3个节点
$('ul.lang li:first-child'); // 仅选出JavaScript
$('ul.lang li:last-child'); // 仅选出Lua
$('ul.lang li:nth-child(2)'); // 选出第N个元素，N从1开始
$('ul.lang li:nth-child(even)'); // 选出序号为偶数的元素
$('ul.lang li:nth-child(odd)'); // 选出序号为奇数的元素

表单相关

针对表单元素，jQuery还有一组特殊的选择器：
    :input：可以选择<input>，<textarea>，<select>和<button>；
    :file：可以选择<input type="file">，和input[type=file]一样；
    :checkbox：可以选择复选框，和input[type=checkbox]一样；
    :radio：可以选择单选框，和input[type=radio]一样；
    :focus：可以选择当前输入焦点的元素，例如把光标放到一个<input>上，用$('input:focus')就可以选出；
    :checked：选择当前勾上的单选框和复选框，用这个选择器可以立刻获得用户选择的项目，如$('input[type=radio]:checked')；
    :enabled：可以选择可以正常输入的<input>、<select> 等，也就是没有灰掉的输入；
    :disabled：和:enabled正好相反，选择那些不能输入的。
此外，jQuery还有很多有用的选择器，例如，选出可见的或隐藏的元素：
$('div:visible'); // 所有可见的div
$('div:hidden'); // 所有隐藏的div

还可以用find()函数查找子元素，对于位于同一层级的节点，可以通过next()和prev()方法，filter()方法可以过滤掉不符合选择器条件的节点，或者传入一个函数，要特别注意函数内部的this被绑定为DOM对象，不是jQuery对象

对于表单元素，jQuery对象统一提供val()方法获取和设置对应的value属性


鼠标事件

click: 鼠标单击时触发；
dblclick：鼠标双击时触发；
mouseenter：鼠标进入时触发；
mouseleave：鼠标移出时触发；
mousemove：鼠标在DOM内部移动时触发；
hover：鼠标进入和退出时触发两个函数，相当于mouseenter加上mouseleave。

focus：当DOM获得焦点时触发； blur：当DOM失去焦点时触发； change：当<input>、<select>或<textarea>的内容改变时触发； submit：当<form>提交时触发； ready：当页面被载入并且DOM树完成初始化后触发。


动画：

$(selector).animate(styles,speed,easing,callback);
jQuery的动画效果还可以串行执行，通过delay()方法还可以实现暂停,dalay(1000);


编写jQuery插件
给jQuery对象绑定一个新方法是通过扩展$.fn对象实现的。让我们来编写第一个扩展――highlight1()：
$.fn.highlight1 = function () {
    // this已绑定为当前jQuery对象:
    this.css('backgroundColor', '#fffceb').css('color', '#d85030');
    return this;
}

另一种方法是使用jQuery提供的辅助方法$.extend(target, obj1, obj2, ...)，它把多个object对象的属性合并到第一个target对象中，遇到同名属性，总是使用靠后的对象的值，也就是越往后优先级越高；
$.fn.highlight = function (options) {
    // 合并默认值和用户设定值:
    var opts = $.extend({}, $.fn.highlight.defaults, options);
    this.css('backgroundColor', opts.backgroundColor).css('color', opts.color);
    return this;
}
// 设定默认值:
$.fn.highlight.defaults = {
    color: '#d85030',
    backgroundColor: '#fff8de'
}
